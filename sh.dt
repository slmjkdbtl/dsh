-- TODO: config file stdlib
-- TODO: hist file
-- TODO: 'z' quick jump
-- TODO: line edit independent of prompt

$ fs = import("fs")
$ str = import("str")
$ arr = import("arr")
$ sys = import("sys")
$ term = import("term")
$ dbg = import("dbg")

term.no_echo()
sys.signal(~ () {})

$ hist = []

@ {

	-- load cfg and hist
	$ home = sys.getenv("HOME")
	$ cfgfile = home + "/.dshrc"
	$ histfile = home + "/.dshhist"

-- 	? (fs.exists(cfgfile)) {
-- 		$ cfg = dofile(cfgfile)
-- 	}

-- 	? (fs.exists(histfile)) {
-- 		$ hist = fs.read(histfile)
-- 	}

	-- prompt
	$ user = sys.getenv("USER")
	$ host = "broccoli"
	$ cwd = sys.cwd() : str.replace(home, "~")

	sys.print("\n")
	sys.print((user + "@" + host) : term.dim())
	sys.print("\n")
	sys.print(cwd : term.bold() : term.magenta())
	sys.print("\n")
	sys.print(term.yellow("> "))

	$ line = ""
	$ cur = 0

	~ prev_word () {
		? (cur > 0) {
			$ pos = line : str.rfind_at(" ", cur - 2)
			? (pos != -1) cur = pos + 1 | cur = 0
		}
	}

	~ next_word () {
		$ pos = line : str.find_at(" ", cur + 2)
		? (pos != -1) cur = pos - 1 | cur = #line
	}

	~ del_word () {
		$ pos = line : str.rfind_at(" ", cur - 2)
		? (pos != -1) {
			line = line[0..(pos + 1)] + line[cur..#line]
			cur = pos + 1
		} | {
			line = line[cur..#line]
			cur = 0
		}
	}

	~ del () {
		? (cur > 0) {
			line = line[0..(cur - 1)] + line[cur..#line]
			cur -= 1
		}
	}

	~ insert (ch) {
		line = line[0..cur] + ch + line[cur..#line]
		cur += 1
	}

	~ move_left() ? (cur > 0) cur -= 1
	~ move_right() ? (cur < #line) cur += 1
	~ move_up() { --- todo --- }
	~ move_down() { --- todo --- }

	~ escaped () {

		$ ch = sys.getchar()

		? (ch == "[") {
			ch = sys.getchar()
			? (ch == "A") move_up()
			| (ch == "B") move_down()
			| (ch == "C") move_right()
			| (ch == "D") move_left()
		}
		| (ch == "b") prev_word()
		| (ch == "f") next_word()
		| (str.code(ch) == 127) del_word()

	}

	-- line edit
	@ {

		-- input
		$ ch = sys.getchar()

		? (ch : str.code() == 127) del()
		| (ch : str.code() == 27) escaped()
		| (ch == "\n") { sys.print("\n") @> }
		| insert(ch)

		-- render
		sys.print(term.clear_line())
		sys.print(term.move_cursor_col(1))
		sys.print(term.yellow("> "))
		sys.print(line)
		sys.print(term.move_cursor_col(cur + 3))

	}

	-- exec
	$ chunks = line : str.split(" ")
	$ cmd = chunks[0]

	? (cmd == "cd") { ? (#chunks > 1) sys.chdir(chunks[1]) }
	| (cmd == "exit") @>
	| sys.exec(line)

	hist : arr.push(line)

}

#!/usr/bin/env dirty

-- TODO: config file stdlib
-- TODO: hist file
-- TODO: 'z' quick jump
-- TODO: fork() + execvp() instead of system()

$ fs = import("fs")
$ str = import("str")
$ arr = import("arr")
$ sys = import("sys")
$ term = import("term")
$ dbg = import("dbg")

term.rawmode()
sys.signal(~ () {})

~ err (msg) print(term.red() + msg + term.reset())

$ hist = []

~ defprompt () {

	$ home = sys.getenv("HOME")
	$ user = sys.getenv("USER")
	$ host = "broccoli"
	$ cwd = sys.cwd() : str.replace(home, "~")

	sys.print("\n")
	sys.print(term.dim() + user + "@" + host + term.reset())
	sys.print("\n")
	sys.print(term.bold() + term.magenta() + cwd + term.reset())
	sys.print("\n")
	sys.print(term.yellow() + "> " + term.reset())

}

~ loadcfg() {

-- 	$ home = sys.getenv("HOME")
-- 	$ cfgfile = home + "/.dshrc"
	$ cfgfile = ".dshrc"

	$ cfg = {
		alias: {}
		abbr: {}
		cmd: {}
		prompt: defprompt
	}

	? (fs.exists(cfgfile)) {
		:) dofile(cfgfile, {
			env: ~ (k, v) sys.setenv(k, v)
			path: ~ (p) sys.setenv("PATH", sys.getenv("PATH") + ":" + p)
			alias: ~ (key, exp) cfg.alias[key] = exp
			abbr: ~ (key, exp) cfg.abbr[key] = exp
			cmd: ~ (name, f) cfg.cmd[name] = f
			prompt: ~ (f) cfg.prompt = f
		}) | ~ (msg, line) err("~/.dshrc:" + line + ": " + msg)
	}

	~> cfg

}

$ cfg = loadcfg()

@ {

	-- prompt
	cfg.prompt()
	term.cursave()

	$ line = ""
	$ cur = 0

	~ prev_word () {
		? (cur > 0) {
			$ pos = line : str.rfind_at(" ", cur - 2)
			? (pos != -1) cur = pos + 1 | cur = 0
		}
	}

	~ next_word () {
		$ pos = line : str.find_at(" ", cur + 2)
		? (pos != -1) cur = pos - 1 | cur = #line
	}

	~ del_word () {
		$ pos = line : str.rfind_at(" ", cur - 2)
		? (pos != -1) {
			line = line[0..(pos + 1)] + line[cur..#line]
			cur = pos + 1
		} | {
			line = line[cur..#line]
			cur = 0
		}
	}

	~ del () {
		? (cur > 0) {
			line = line[0..(cur - 1)] + line[cur..#line]
			cur -= 1
		}
	}

	~ insert (ch) {
		line = line[0..cur] + ch + line[cur..#line]
		cur += 1
	}

	~ move_left() ? (cur > 0) cur -= 1
	~ move_right() ? (cur < #line) cur += 1
	~ move_up() { --- TODO --- }
	~ move_down() { --- TODO --- }

	~ escaped () {

		$ ch = sys.getchar()

		? (ch == "[") {
			ch = sys.getchar()
			? (ch == "A") move_up()
			| (ch == "B") move_down()
			| (ch == "C") move_right()
			| (ch == "D") move_left()
		}
		| (ch == "b") prev_word()
		| (ch == "f") next_word()
		| (str.code(ch) == 127) del_word()

	}

	-- line edit
	@ {

		-- input
		$ ch = sys.getchar()

		? (ch : str.code() == 127) del()
		| (ch : str.code() == 27) escaped()
		| (ch == "\n") { sys.print("\n") @> }
		| insert(ch)

		-- render
		term.curload()
		term.clrln0()
		sys.print(line)
		@ (i \ 0..(#line - cur)) term.curleft()

	}

	-- exec
	$ chunks = line : str.split(" ")
	$ cmd = chunks[0]

	? (cmd == "cd") { ? (#chunks > 1) sys.chdir(chunks[1]) }
	| (cmd == "exit") @>
	| (cmd == "z") { --- TODO --- }
	| sys.exec(line)

	hist : arr.push(line)

}
